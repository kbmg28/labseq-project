package br.com.kbmg.wslabseq.service;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;

import java.math.BigInteger;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(MockitoExtension.class)
class LabSeqServiceTest {

    @InjectMocks
    private LabSeqService labSeqService;

    @Test
    void getResultValueShouldReturnBigValue() {
        long start = System.currentTimeMillis();
        BigInteger resultValue = labSeqService.getResultValue(10000);
        long end = System.currentTimeMillis();
        long executionTime = end - start;
        BigInteger expected = new BigInteger("69950566878097184013157744477635556727868849589082998911839343197880823215346221009722233023943602770307729191665655398407165768121564186987192397693071609846919453430811144389823875683774480880281479951416523467736343974525549960389427464841013320746241755697990287429747307066048835194835534301361435435171244963037487135503198565459610125773779110841477593382691667903942271834984619627946845583317271714790127086723614783681640902031022970893247841818337935296805019561967546398282596597404334400595273408222818081762762981879844447410743730739725556081175617700994424267694361314464204552899258977619983936670456553201627025301979470684612183482967552781789171894406131379502874476544298881442363169258726593616997962614541232149734611181684936265928412294383549494959124156102645749161099774806409315657803977415799277767229630141831326718534674913706653355139");

        Assertions.assertAll(
                () -> assertTrue(executionTime < 10_000),
                () -> assertEquals(expected, resultValue)
        );
    }

    @Test
    void getResultValueShouldReturnFastIfCallTwice() {
        BigInteger expected = new BigInteger("2174507959776268519636709150188479904296567558989735860930221185672980281690664620175305581443095003037903768374641056133134797703024055738477410629574159825823766462979374240718639575355054123785448231103128077108671643708594481480042216871576169212891638659612958345696778831379906593076932799641296761357068095219358548901312912787452766991082363939909793345351258358987140394236531362054725965163519525248274482676827668149257091331474736612368789085881538439758026730551401664208427955455977489702836342776413515843125786849428745588835224131903256189808083517276271796934200363329765420679882008923432213807347913478691241681371637995466048114808217397597353714120732327457650000601936922812338259571444584626127330493137924103583788352688848196281677483733290497426018202842772372034531844526416277465629616831511748346496106597460347129316059525834873259807797767940355577620241856987442280309450380248633948720013177539794688622322386548865917333242847578526855416595669888791962350276117571700599218872093086217427201536294207622850438347227914325665903864299488326251656251861667208813109580294317979691788088661712355630319079719246662750151468399745408328964911437259038372506502838918275175438205123775920158335035816447207549839726075030183940676305131519833112537611611136314774837111519147866165238018936009740634241946259945842965727706823316268402597144238893070858206222684871800821239155437361657739270277694264971375459260486980419206329397893600138076277470344672421373131900047413676804845586155620721697085026865245616811212313013741455857239186148116978587514728564743445497581757548130673615310862981415907001123240416668611856852079822378575469955946588586786847211525870408543198980680038706787246714711382590643774907528346493512788230081061986885315827824941487135539689859387434468090040253499969078723441820580383088320046388002803229434010796785357256419460811442498664285431379028341601691351487458879928777659042416604537169923155816397437528272707299405023068644928825394488987698982159714882758470150502441822169639425407066436641038704287452540514399313516263187136990716889575668303943783159970893115785060634869700300803619745056246400690214539274326727576486158687832573528998296539019856746099770744631925178229848619133973515359773338778892565787927628688094916381993925494803106210218107076982399353728474325092627581158124289100117877677735383174252569505673943810820142963598935611500573187385296312702984736239351283724466964183318622620092148026222883782516652632363649677012378849582387998087155776258591171334712638394881895164643888202861465933152");

        labSeqService.getResultValue(30000);

        long startSecond = System.currentTimeMillis();
        BigInteger resultValue = labSeqService.getResultValue(30000);
        long endSecond = System.currentTimeMillis();
        long executionTimeSecond = endSecond - startSecond;

        Assertions.assertAll(
                () -> assertTrue(executionTimeSecond < 20),
                () -> assertEquals(expected, resultValue)
        );
    }

    @ParameterizedTest
    @MethodSource
    void getResultValueSmallValues(Integer number, BigInteger expected) {
        BigInteger resultValue = labSeqService.getResultValue(number);

        assertEquals(expected, resultValue);
    }

    static Stream<Arguments> getResultValueSmallValues() {
        return Stream.of(
                Arguments.of(0, BigInteger.valueOf(0)),
                Arguments.of(1, BigInteger.valueOf(1)),
                Arguments.of(2, BigInteger.valueOf(0)),
                Arguments.of(3, BigInteger.valueOf(1)),
                Arguments.of(4, BigInteger.valueOf(1)),
                Arguments.of(5, BigInteger.valueOf(1)),
                Arguments.of(6, BigInteger.valueOf(1)),
                Arguments.of(7, BigInteger.valueOf(2)),
                Arguments.of(8, BigInteger.valueOf(2)),
                Arguments.of(9, BigInteger.valueOf(2)),
                Arguments.of(10, BigInteger.valueOf(3))
        );
    }
}